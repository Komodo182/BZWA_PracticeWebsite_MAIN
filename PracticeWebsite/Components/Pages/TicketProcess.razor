@page "/tickets/processing"
@rendermode InteractiveServer
@* @inject AttractionService AttractionService
@using PracticeWebsite.Models
@using PracticeWebsite.
 *@

<PageTitle>Ticket Purchasing...</PageTitle>

<MudContainer Fixed="true">
    <MudCard Class="flex-auto d-flex py-8 mud-theme-white" Elevation="6">
        <MudStepper NonLinear ShowResetButton OnPreviewInteraction="OnPreviewInteraction">
            <MudStep Title="Date" SecondaryText="When are you visiting?" HasError="@(_step1Complete==false)">
                <MudCard>
                    <MudCardHeader>
                        <MudText Typo="Typo.h4">Please select what day you would like to book...</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudDatePicker @bind-Date="_datechosen" MinDate="_minDate" PickerVariant="PickerVariant.Static"/>
                        <MudHidden Breakpoint="@Breakpoint.Xs">
                        </MudHidden>
                        <MudButton Disabled="@_processing1" OnClick="ProcessSomething1" @bind-Completed="_step1Complete" Variant="Variant.Outlined" Color="Color.Primary">
                            @if (_processing1)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                <MudText Class="ms-2">Processing</MudText>
                            }
                            else
                            {
                                <MudText>Confirm Date</MudText>
                            }
                        </MudButton>
                    </MudCardContent>
                </MudCard>
            </MudStep>

            <MudStep Title="Step 2" SecondaryText="Whos coming?" HasError="@(_step2Complete==false)">
                <MudTable Items="Tickets" Dense="true" Bordered="true" Hover="true">
                    <HeaderContent>
                        <MudTh>Ticket Name</MudTh>
                        <MudTh>Price</MudTh>
                        <MudTh>Quantity</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.Name</MudTd>
                        <MudTd>@($"£{context.Price:F2}")</MudTd>
                        <MudTd>
                            <MudNumericField @bind-Value="@context.Quantity" Min="0" Max="10" />
                        </MudTd>
                    </RowTemplate>
                </MudTable>

                <MudText Typo="Typo.h6" Class="mt-4">Selected Quantities</MudText>
                <ul>
                    @foreach (var ticket in Tickets)
                    {
                        <li>@($"{ticket.Name}: {ticket.Quantity}")</li>
                    }
                </ul>

                <MudButton Disabled="@_processing2" OnClick="ProcessSomething2" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4">
                    Confirm Selection
                </MudButton>

                @if (_processing2)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudText>Confirm Selection</MudText>
                }

                <MudText Typo="Typo.h6" Class="mt-4">Selected Tickets</MudText>
                @if (ConfirmedTickets?.Any() == true)
                {
                    <ul>
                        @foreach (var ticket in ConfirmedTickets)
                        {
                            <li>@($"{ticket.Name}: {ticket.Quantity}")</li>
                        }
                    </ul>
                }
                else
                {
                    <MudText Typo="Typo.body2" Class="mt-2">No tickets selected yet.</MudText>
                }
            </MudStep>


            <MudStep Title="Step 3" SecondaryText="Choose a timeslot" HasError="@(_step3Complete==false)">
                <MudGrid>
                    <!-- Ticket Summary -->
                    <MudItem xs="12" md="6">
                        <MudText Typo="Typo.h6" Class="mb-2">Selected Tickets</MudText>
                        @if (ConfirmedTickets?.Any() == true)
                        {
                            <MudTable Items="ConfirmedTickets" Dense="true" Bordered="true">
                                <HeaderContent>
                                    <MudTh>Ticket Name</MudTh>
                                    <MudTh>Quantity</MudTh>
                                    <MudTh>Date</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd>@context.Name</MudTd>
                                    <MudTd>@context.Quantity</MudTd>
                                    <MudTd>@context.Date?.ToString("d")</MudTd>
                                </RowTemplate>
                            </MudTable>
                        }
                        else
                        {
                            <MudText Typo="Typo.body2">No tickets selected.</MudText>
                        }
                    </MudItem>

                    <!-- Input Fields -->
                    <MudItem xs="12" md="6">
                        <MudText Typo="Typo.h6" Class="mb-2">Personal Information</MudText>
                        <MudTextField Label="First Name" @bind-Value="fName" Required="true" />
                        <MudTextField Label="Last Name" @bind-Value="lName" Required="true" />
                        <MudTextField Label="Email" @bind-Value="email" Required="true" />
                        <MudTextField Label="Telephone" @bind-Value="phone" Required="true" />
                        <MudTextField Label="Address" @bind-Value="address" Required="true" />

                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveCheckoutData" Class="mt-4">
                            Save and Complete
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudStep>

        </MudStepper>
    </MudCard>
</MudContainer>






@code 
{
    [Inject]
    IDialogService DialogService { get; set; }

    bool success;
    private bool? _step1Complete;
    private bool? _step2Complete;
    private bool? _step3Complete;
    private DateTime? _date;
    private DateTime? _datechosen = DateTime.Today;
    private DateTime _minDate = DateTime.Now.Date;
    private int _quantitychosen_1;
    private int _quantitychosen_2;
    private int _quantitychosen_3;
    private int _quantitychosen_4;
    private int _quantitychosen_5;
    private int _quantitychosen_6;
    private int _quantitychosen_7;
    private int _quantitychosen_8;
    private int _quantitychosen_9; 
    private int _quantitychosen_10;
    private bool _processing1 = false;
    private async Task ProcessSomething1()
    {
        _processing1 = true;
        _date = _datechosen;
        await Task.Delay(1);
        _processing1 = false;
        _step1Complete = true;
    }
    private bool _processing2 = false;
    private async Task ProcessSomething2()
    {
        Console.WriteLine("pressed");
        _processing2 = true;
        await ConfirmSelectionAsync();
        await Task.Delay(1);
        _processing2 = false;
        _step2Complete = true;
    }

    private async Task OnPreviewInteraction(StepperInteractionEventArgs arg)
    {
        if (arg.Action == StepAction.Complete)
        {
            // occurrs when clicking next
            await ControlStepCompletion(arg);
        }
        else if (arg.Action == StepAction.Activate)
        {
            // occurrs when clicking a step header with the mouse
            await ControlStepNavigation(arg);
        }
    }

    private async Task ControlStepCompletion(StepperInteractionEventArgs arg)
    {
        switch (arg.StepIndex)
        {
            case 0:
                if ((_step1Complete != true) || (_date < _minDate) || (_date == null))
                {
                    await DialogService.ShowMessageBox("Error", "You have not selected a date in the step 'Date'.");
                    arg.Cancel = true;
                }
                break;
            case 1:
                if ((_step2Complete != true))
                {
                    await DialogService.ShowMessageBox("Error", "You have not submitted any tickets.");
                    arg.Cancel = true;
                }
                break;
        }
    }

    private async Task ControlStepNavigation(StepperInteractionEventArgs arg)
    {
        switch (arg.StepIndex)
        {
            case 1:
                if (_step1Complete != true)
                {
                    await DialogService.ShowMessageBox("Error", "Finish step 'Date' first.");
                    arg.Cancel = true;
                }
                break;
            case 2:
                if ((_step1Complete != true) || (_step2Complete != true))
                {
                    await DialogService.ShowMessageBox("Error", "Finish step 1 and 2 first.");
                    arg.Cancel = true;
                }
                break;
        }
    }
    private void DataSubmit(EditContext context)
    {
        success = true;
    }
    public class DataSubmitForm
    {

    }

    public class Ticket
    {
        public string Name { get; set; }
        public decimal Price { get; set; }
        public int Quantity { get; set; }
        public DateTime? Date { get; set; }
    }

    private List<Ticket> Tickets = new List<Ticket>
    {
        new Ticket { Name = "Admission - Adult (16+)", Price = 19.99M, Quantity = 0 },
        new Ticket { Name = "Admission - Child (6-15)", Price = 14.99M, Quantity = 0 },
        new Ticket { Name = "Admission - Senior (65+)", Price = 17.99M, Quantity = 0 },
        new Ticket { Name = "Admission - Student", Price = 17.99M, Quantity = 0 },
        new Ticket { Name = "Admission - Under 6s", Price = 0.00M, Quantity = 0 },
        new Ticket { Name = "Admission - Disabled Adult (16+)", Price = 14.99M, Quantity = 0 },
        new Ticket { Name = "Admission - Disabled Child (6-15)", Price = 9.99M, Quantity = 0 },
        new Ticket { Name = "Admission - Disabled Senior (65+)", Price = 11.99M, Quantity = 0 },
        new Ticket { Name = "Admission - Disabled Student", Price = 11.99M, Quantity = 0 },
        new Ticket { Name = "Admission - Disabled Carer", Price = 8.00M, Quantity = 0 }
    };
    private List<Ticket> ConfirmedTickets = new();

    private async Task ConfirmSelectionAsync()
    {
        // Save only tickets with quantity > 0
        ConfirmedTickets = Tickets
            .Where(ticket => ticket.Quantity > 0)
            .Select(ticket => new Ticket
                {
                    Name = ticket.Name,
                    Quantity = ticket.Quantity,
                    Date = _datechosen
                })
            .ToList();
    }

    private string fName { get; set; }
    private string lName { get; set; }
    private string email { get; set; }
    private string phone { get; set; }
    private string address { get; set; }

    private async Task SaveCheckoutData()
    {
        // Simulate saving Name and Email
        await Task.Delay(500); // Simulate processing delay
        Snackbar?.Add($"Checkout complete! Name: {fName}, Email: {email}", Severity.Success);
    }

    [Inject]
    private ISnackbar Snackbar { get; set; }







}
