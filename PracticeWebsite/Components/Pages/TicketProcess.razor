@page "/tickets/processing"
@rendermode InteractiveServer
@* @inject AttractionService AttractionService
@using PracticeWebsite.Models
@using PracticeWebsite.
 *@


<PageTitle>Ticket Purchasing...</PageTitle>
<MudContainer Fixed="true">
    <MudPaper Class="flex-auto d-flex py-8 mud-theme-white" Elevation="6">
        <MudStepper NonLinear ShowResetButton OnPreviewInteraction="OnPreviewInteraction">

            <MudStep Title="Date" SecondaryText="When are you visiting?" HasError="@(_step1Complete==false)">
                @* <MudSwitch @bind-Value="_step1Complete" Color="Color.Primary">Flip the switch to be able to advance to step 2</MudSwitch> *@
                <MudCard>
                    <MudCardHeader>
                        <MudText Typo="Typo.h4">Please select what day you would like to book...</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudSelect>
                            <MudDatePicker @bind-Value="_datechosen" MinDate="_minDate" PickerVariant="PickerVariant.Static" Date="@(DateTime.Today.AddDays(1))" />
                            <MudHidden Breakpoint="@Breakpoint.Xs">
                            </MudHidden>
                            <MudButton @bind-Value="_step1Complete" Variant="Variant.Outlined" Color="Color.Primary">Select the date</MudButton>
                        </MudSelect>
                    </MudCardContent>
                </MudCard>
            </MudStep>
            <MudStep Title="Step 2" SecondaryText="Whos coming?" HasError="@(_step2Complete==false)">
                @* <MudTextField @bind-Value="_step2TextInput" Variant="Variant.Filled" Clearable /> *@
                @* <EditFrom>
                    <MudCard>
                        <MudCardContent>
                            <MudTable Items="@order.OrderTicketDetails" Hover="true" Breakpoint="Bearkpoint.None" Dense="@true" Elevation="0">
                                <HeaderContent>
                                    <MudTh>Ticket Description</MudTh>
                                    <MudTh>Quantity</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Description">

                                    </MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudCardContent>
                    </MudCard>
                </EditFrom> *@
            </MudStep>

            <MudStep Title="Step 3" SecondaryText="Choose a timeslot" HasError="@(_step3Complete==false)">
                @* <MudTextField Label="Enter some text" @bind-Value="_step2TextInput" Variant="Variant.Filled" Clearable /> *@
                <MudCard>
                    <MudCardContent>

                    </MudCardContent>
                </MudCard>
            </MudStep>

        </MudStepper>
    </MudPaper>
</MudContainer>






@code 
{
    private DateTime _minDate = DateTime.Now.Date;

    [Inject]
    IDialogService DialogService { get; set; }

    //DataSubmitForm ticketdate = new DataSubmitForm();
    bool success;

    private bool? _step1Complete;
    private bool? _step2Complete;
    private bool? _step3Complete;
    //private string _step2TextInput;
    private DateOnly _datechosen;




    private async Task OnPreviewInteraction(StepperInteractionEventArgs arg)
    {
        if (arg.Action == StepAction.Complete)
        {
            // occurrs when clicking next
            await ControlStepCompletion(arg);
        }
        else if (arg.Action == StepAction.Activate)
        {
            // occurrs when clicking a step header with the mouse
            await ControlStepNavigation(arg);
        }
    }

    private async Task ControlStepCompletion(StepperInteractionEventArgs arg)
    {
        switch (arg.StepIndex)
        {
            case 0:
                if (_step1Complete != true)
                {
                    await DialogService.ShowMessageBox("Error", "You have not selected a date in the step 'Date'.");
                    arg.Cancel = true;
                }
                break;
            case 1:
                if ((_step2TextInput?.Length ?? 0) == 0)
                {
                    await DialogService.ShowMessageBox("Error", "You have not ...");
                    arg.Cancel = true;
                }
                break;
        }
    }

    private async Task ControlStepNavigation(StepperInteractionEventArgs arg)
    {
        switch (arg.StepIndex)
        {
            case 1:
                if (_step1Complete != true)
                {
                    await DialogService.ShowMessageBox("Error", "Finish step 'Date' first.");
                    arg.Cancel = true;
                }
                break;
            case 2:
                if (_step1Complete != true || (_step2TextInput?.Length ?? 0) == 0)
                {
                    await DialogService.ShowMessageBox("Error", "Finish step 1 and 2 first.");
                    arg.Cancel = true;
                }
                break;
        }
    }
    private void DataSubmit(EditContext context)
    {
        success = true;
    }
    public class DataSubmitForm
    {

    }

    // List<Attraction> attractions;
    // List<Tickets> tickets;
    //DateOnly ticketDate;
    // protected override async Task OnInitializedAsync()
    // {
    //     attractions = awat AttractionService.GetAttractionasync();
    //     tickets = new List<Tickets>();
    // }
    // priavte void AddTicket(int attractionId)
    // priate void BookTickets()













}
