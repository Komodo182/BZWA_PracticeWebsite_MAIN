@page "/tickets/processing"
@rendermode InteractiveServer
@* @inject AttractionService AttractionService
@using PracticeWebsite.Models
@using PracticeWebsite.
 *@


<PageTitle>Ticket Purchasing...</PageTitle>
<MudContainer Fixed="true">
    <MudCard Class="flex-auto d-flex py-8 mud-theme-white" Elevation="6">
        <MudStepper NonLinear ShowResetButton OnPreviewInteraction="OnPreviewInteraction">

            <MudStep Title="Date" SecondaryText="When are you visiting?" HasError="@(_step1Complete==false)">
                @* <MudSwitch @bind-Value="_step1Complete" Color="Color.Primary">Flip the switch to be able to advance to step 2</MudSwitch> *@
                <MudCard>
                    <MudCardHeader>
                        <MudText Typo="Typo.h4">Please select what day you would like to book...</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudDatePicker @bind-Date="_datechosen" MinDate="_minDate" PickerVariant="PickerVariant.Static"/>
                        <MudHidden Breakpoint="@Breakpoint.Xs">
                        </MudHidden>
                        <MudButton Disabled="@_processing1" OnClick="ProcessSomething1" @bind-Completed="_step1Complete" Variant="Variant.Outlined" Color="Color.Primary">
                            @if (_processing1)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                <MudText Class="ms-2">Processing</MudText>
                            }
                            else
                            {
                                <MudText>Confirm Date</MudText>
                            }
                        </MudButton>
                    </MudCardContent>
                </MudCard>
            </MudStep>

            <MudStep Title="Step 2" SecondaryText="Whos coming?" HasError="@(_step2Complete==false)">
                <MudDataGrid Items="@admissiontickets" Filterable="false" SortMode="@SortMode.None" Groupable="false" ReadOnly="false">
                    <Columns>
                        <PropertyColumn Property="x => x.tickets" Title="Admission Tickets" Editable="false" />
                        <PropertyColumn Property="x => x.prices" Title="Prices" Editable="false" />
                        <TemplateColumn Title="Quantity" Editable="true">
                            <CellTemplate>
                                <MudStack Row>
                                    <MudNumericField Min="0" Max="20" />
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
                <MudButton Disabled="@_processing2" OnClick="ProcessSomething2" @bind-Completed="_step2Complete" Variant="Variant.Outlined" Color="Color.Primary">
                    @if (_processing2)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Processing</MudText>
                    }
                    else
                    {
                        <MudText>Confirm Tickets</MudText>
                    }
                </MudButton>
            </MudStep>

            <MudStep Title="Step 3" SecondaryText="Choose a timeslot" HasError="@(_step3Complete==false)">
                @* <MudTextField Label="Enter some text" @bind-Value="_step2TextInput" Variant="Variant.Filled" Clearable /> *@
            </MudStep>

        </MudStepper>
    </MudCard>
</MudContainer>






@code 
{

    //Admission Ticket list
    public record admissionticketlist(string tickets, double prices, int quantitychose);
    public IEnumerable<admissionticketlist> admissiontickets;
    protected override void OnInitialized()
    {
        admissiontickets = new List<admissionticketlist>
        {
            new admissionticketlist("Admission - Adult (16+)", 19.99 ,_quantitychosen_1),
            new admissionticketlist("Admission - Child (6-15)", 14.99 ,_quantitychosen_2),
            new admissionticketlist("Admission - Senior (65+)", 17.99 ,_quantitychosen_3),
            new admissionticketlist("Admission - Student", 17.99 ,_quantitychosen_4),
            new admissionticketlist("Admission - Under 6s", 0 ,_quantitychosen_5),
            new admissionticketlist("Admission - Disabled Adult (16+)", 14.99 ,_quantitychosen_6),
            new admissionticketlist("Admission - Disabled Child (6-15)", 9.99 ,_quantitychosen_7),
            new admissionticketlist("Admission - Disabled Senior (65+)", 11.99 ,_quantitychosen_8),
            new admissionticketlist("Admission - Disabled Student", 11.99 ,_quantitychosen_9),
            new admissionticketlist("Admission - Disabled Carer", 8 ,_quantitychosen_10),
        };
    }

    [Inject]
    IDialogService DialogService { get; set; }

    //DataSubmitForm ticketdate = new DataSubmitForm();
    bool success;

    private bool? _step1Complete;
    private bool? _step2Complete;
    private bool? _step3Complete;
    //private string _step2TextInput;
    private DateTime? _date;
    private DateTime? _datechosen = DateTime.Today;
    private DateTime _minDate = DateTime.Now.Date;
    private int _quantitychosen_1;
    private int _quantitychosen_2;
    private int _quantitychosen_3;
    private int _quantitychosen_4;
    private int _quantitychosen_5;
    private int _quantitychosen_6;
    private int _quantitychosen_7;
    private int _quantitychosen_8;
    private int _quantitychosen_9; 
    private int _quantitychosen_10;

    //Date button processing
    private bool _processing1 = false;
    private async Task ProcessSomething1()
    {
        _processing1 = true;
        _date = _datechosen;
        _step1Complete = true;
        await Task.Delay(2000);
        _processing1 = false;
    }
    private bool _processing2 = false;
    private async Task ProcessSomething2()
    {
        Console.WriteLine("pressed");
        // _processing2 = true;
        // _step2Complete = true;
        // await TicketProcessing();
        // await Task.Delay(2000);
        // _processing2 = false;
    }

    private async Task TicketProcessing()
    {
        // if (_quantitychosen_1 > 0)
        // {
        //     _quantitychosen_1 = Adm_Adult_Norm(_quantitychosen_1)
        // }
        // private int _quantitychosen_1;
        // private int _quantitychosen_2;
        // private int _quantitychosen_3;
        // private int _quantitychosen_4;
        // private int _quantitychosen_5;
        // private int _quantitychosen_6;
        // private int _quantitychosen_7;
        // private int _quantitychosen_8;
        // private int _quantitychosen_9; 
        // private int _quantitychosen_10;
    }

    private async Task OnPreviewInteraction(StepperInteractionEventArgs arg)
    {
        if (arg.Action == StepAction.Complete)
        {
            // occurrs when clicking next
            await ControlStepCompletion(arg);
        }
        else if (arg.Action == StepAction.Activate)
        {
            // occurrs when clicking a step header with the mouse
            await ControlStepNavigation(arg);
        }
    }

    private async Task ControlStepCompletion(StepperInteractionEventArgs arg)
    {
        switch (arg.StepIndex)
        {
            case 0:
                if ((_step1Complete != true) || (_date < _minDate) || (_date == null))
                {
                    await DialogService.ShowMessageBox("Error", "You have not selected a date in the step 'Date'.");
                    arg.Cancel = true;
                }
                break;
            case 1:
                if ((_step2Complete != true))
                {
                    await DialogService.ShowMessageBox("Error", "You have not submitted any tickets.");
                    arg.Cancel = true;
                }
                break;
        }
    }

    private async Task ControlStepNavigation(StepperInteractionEventArgs arg)
    {
        switch (arg.StepIndex)
        {
            case 1:
                if (_step1Complete != true)
                {
                    await DialogService.ShowMessageBox("Error", "Finish step 'Date' first.");
                    arg.Cancel = true;
                }
                break;
            case 2:
                if ((_step1Complete != true) || (_step2Complete != true))
                {
                    await DialogService.ShowMessageBox("Error", "Finish step 1 and 2 first.");
                    arg.Cancel = true;
                }
                break;
        }
    }
    private void DataSubmit(EditContext context)
    {
        success = true;
    }
    public class DataSubmitForm
    {

    }

}
