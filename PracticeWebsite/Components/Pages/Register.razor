@using PracticeWebsite.Models
@page "/register"
@rendermode InteractiveServer
@using PracticeWebsite.Services
@inject CustomerServices CustomerService
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations

<title>Register</title>
<h3>Register</h3>

<EditForm Model="@model" OnValidSubmit="OnValidSubmit"><DataAnnotationsValidator/>
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="First name" HelperText="Max. 15 characters"
                                  @bind-Value="model.FirstName" For="@(() => model.FirstName)" />
                    <MudTextField Label="Last name" HelperText="Max. 20 characters"
                                  @bind-Value="model.LastName" For="@(() => model.LastName)" />
                    <MudTextField Label="Email" Class="mt-3"
                                  @bind-Value="model.Email" For="@(() => model.Email)" InputType="InputType.Email" />
                    <MudTextField Label="Username" HelperText="Max. 8 characters"
                                  @bind-Value="model.Username" For="@(() => model.Username)" />
                    <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                  @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                    <MudTextField Label="Repeat Password" HelperText="Repeat the password" Class="mt-3"
                                  @bind-Value="model.Password2" For="@(() => model.Password2)" InputType="InputType.Password" />
                    <MudTextField Label="Post Code" HelperText="Please provide your postcode. Max. 8 characters"
                                  @bind-Value="model.PostCode" For="@(() => model.PostCode)" />
                    <MudTextField Label="Phone Number" HelperText="Please provide your phone number. Max. 11 characters" .
                                  @bind-Value="model.PhoneNumber" For="@(() => model.PhoneNumber)" InputType="InputType.Telephone" />
                    <MudTextField Label="Date Of Birth" HelperText="Please provide your date of birth."
                                  @bind-Value="model.DoB" For="@(() => model.DoB)" InputType="InputType.Date" />
                    <MudCheckBox T="bool" Label="Are you an employee?" @bind-Value="model.employeeStatus" For="@(() => model.employeeStatus)" />
                    @if (model.employeeStatus)
                    {
                        <MudTextField Label="Employee ID" HelperText="Please input your employee identification code."
                                      @bind-Value="model.EmployeeID" For="@(() => model.EmployeeID)" />
                    }
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full">
                <MudText Typo="Typo.subtitle2">Validation Summary: </MudText>
                @if (success)
                {
                    <MudText Color="Color.Success">Success</MudText>
                }
                else
                {
                    <MudText Color="@Color.Error">
                        <ValidationSummary />
                    </MudText>
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Fill out the form correctly to see the success message.<br>
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    
    RegisterAccountForm model = new RegisterAccountForm();
    bool success;

    public class RegisterAccountForm
    {
        
        [Required]
        [StringLength(15, ErrorMessage = "Length of the name can't be more than 15 characters long.")]
        public string FirstName { get; set; }
        [Required]
        [StringLength(20, ErrorMessage = "Length of the name can't be more than 20 characters long.")]
        public string LastName { get; set; }
        [Required]
        [EmailAddress]
        public string Email { get; set; }
        [Required]
        [StringLength(8, ErrorMessage = "Username length can't be more than 8 charcaters long.")]
        public string Username { get; set; }
        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string Password { get; set; }
        [Required]
        [Compare(nameof(Password))]
        public string Password2 { get; set; }
        [Required]
        [StringLength(8, ErrorMessage = "The postcode is invalid length.", MinimumLength = 8)]
        public string PostCode { get; set; }
        [Required]
        [StringLength(11, ErrorMessage = "Invalid phone number length.", MinimumLength = 11)]
        public string PhoneNumber { get; set; }
        [Required]
        [StringLength(8, ErrorMessage = "Invalid date has been provided.")]
        public string DoB { get; set; }
        public bool employeeStatus { get; set; }
        [StringLength(12, ErrorMessage = "Please input your Employee identification code.", MinimumLength = 12)]
        public string EmployeeID { get; set; }
    }

    private void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
        Console.WriteLine("Register button has been clicked");
        Console.WriteLine(model.Username);
        Console.WriteLine(model.Password);
        Console.WriteLine(model.FirstName);
        Console.WriteLine(model.LastName);
        Console.WriteLine(model.Email);
        Console.WriteLine(model.PostCode);
        Console.WriteLine(model.PhoneNumber);
        Console.WriteLine(model.DoB);
        Console.WriteLine(model.employeeStatus);
        Console.WriteLine(model.EmployeeID);
    }
}

