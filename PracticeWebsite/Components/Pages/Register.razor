@using PracticeWebsite.Models
@page "/register"
@rendermode InteractiveServer
@using PracticeWebsite.Services
@inject CustomerServices CustomerService
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations

<style>
    .nAlert {
            padding: 10px;
            background-color: #f44336;
            color: white;
            }
    .pAlert {
        padding: 10px;
        background-color: #00FF00;
        color: white;
    }
</style>
<title>Register</title>
<h3>Register</h3>

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="First name" HelperText="Max. 8 characters"
                                  @bind-Value="model.Username" For="@(() => model.Username)" />
                    <MudTextField Label="Email" Class="mt-3"
                                  @bind-Value="model.Email" For="@(() => model.Email)" />
                    <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                  @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                    <MudTextField Label="Password" HelperText="Repeat the password" Class="mt-3"
                                  @bind-Value="model.Password2" For="@(() => model.Password2)" InputType="InputType.Password" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full">
                <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
                @if (success)
                {
                    <MudText Color="Color.Success">Success</MudText>
                }
                else
                {
                    <MudText Color="@Color.Error">
                        <ValidationSummary />
                    </MudText>
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Fill out the form correctly to see the success message.
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>

@* <form>
    <label for="username">Username:</label><br>
    <input type="text" id="username" name="username" @bind-value=customer.Username><br>
    <label for="password">Password:</label><br>
    <input type="password" id="password" name="password" @bind-value=customer.Password><br>
    <label for="rpassword">Confirm Password:</label><br>
    <input type="password" id="rpassword" name="rpassword" @bind="rpassword"><br>
    @if (!PasswordsMatch && customer.Password != "" && rpassword != "")
    {
            <label class="nAlert"><strong>Danger!</strong> Passwords do not match! Please fix this to continue.</label><br>
    }
    <label for="fname">First Name:</label><br>
    <input type="text" id="fname" name="fname" @bind-value=customer.FirstName><br>
    <label for="lname">Last Name:</label><br>
    <input type="text" id="lname" name="lname" @bind-value=customer.LastName><br>
    <label for="email">Email:</label><br>
    <input type="email" id="email" name="email" @bind-value=customer.Email><br>
    <label for="postcode">PostCode:</label><br>
    <input type="text" id="postcode" name="postcode" @bind-value=customer.Postcode><br>
    <label for="telnum">Phone Number:</label><br>
    <input type="tel" id="telnum" name="telnum" @bind-value=customer.PhoneNumber><br>
    <label for="dob">Date of Birth:</label><br>
    <input type="date" id="dob" name="dob" @bind-value=customer.DateOfBirth><br>
    <label class="form-check-label" for="employeeInputCheckbox">Are you an employee of our organisation?</label><br>
    <input type="checkbox" @bind="isChecked" class="form-check-input" id="employeeInputCheckbox" /><br>
    @if (isChecked)
    {
        <label for="employeeIDInput" class="form-label">Please provide your employee ID:</label><br>
        <input type="text" @bind-value=customer.EmployeeId id="employeeIDInput" placeholder="123456789..." /><br>
    }
    <button @onclick=testButton>Register</button>
</form>
 *@
@code {
    private Customer customer = new Customer();
    private async Task testButton()
    {
        Console.WriteLine("Register button has been clicked");
        Console.WriteLine(customer.Username);
        Console.WriteLine(customer.Password);
        Console.WriteLine(customer.FirstName);
        Console.WriteLine(customer.LastName);
        Console.WriteLine(customer.Email);
        Console.WriteLine(customer.Postcode);
        Console.WriteLine(customer.PhoneNumber);
        Console.WriteLine(customer.DateOfBirth);
        Console.WriteLine(customer.EmployeeId);
        if (!PasswordsMatch && customer.Password != "" && rpassword != "")
            await CustomerService.AddCustomerAsync(customer);
            //<label class="pAlert"><strong>Danger!</strong> Passwords do not match! Please fix this to continue.</label><br>
            
    }
    private bool isChecked = false;
    private string employeeInfo = string.Empty;
    private string password = string.Empty;
    private string rpassword = string.Empty;
    private bool PasswordsMatch => customer.Password == rpassword;

    RegisterAccountForm model = new RegisterAccountForm();
    bool success;

    public class RegisterAccountForm
    {
        [Required]
        [StringLength(8, ErrorMessage = "Name length can't be more than 8.")]
        public string Username { get; set; }
        [Required]
        [EmailAddress]
        public string Email { get; set; }
        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string Password { get; set; }
        [Required]
        [Compare(nameof(Password))]
        public string Password2 { get; set; }
    }

    private void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }
}

